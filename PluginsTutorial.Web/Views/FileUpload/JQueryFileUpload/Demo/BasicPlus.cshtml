@{
	Layout = "~/Views/FileUpload/JQueryFileUpload/Demo/_LayoutDemo.cshtml";
}

@{
	ViewBag.SubHeader = "Basic Plus version";
}

@section javascript {
	<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
	<script src="/Static/plugins/JavaScript-Load-Image/js/load-image.min.js"></script>
	<!-- The Canvas to Blob plugin is included for image resizing functionality -->
	<script src="~/Static/plugins/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
	<!-- The File Upload processing plugin -->
	<script src="~/Static/plugins/jQueryFileUpload/js/jquery.fileupload-process.js"></script>
	<!-- The File Upload image preview & resize plugin -->
	<script src="~/Static/plugins/jQueryFileUpload/js/jquery.fileupload-image.js"></script>
	<!-- The File Upload audio preview plugin -->
	<script src="~/Static/plugins/jQueryFileUpload/js/jquery.fileupload-audio.js"></script>
	<!-- The File Upload video preview plugin -->
	<script src="~/Static/plugins/jQueryFileUpload/js/jquery.fileupload-video.js"></script>
	<!-- The File Upload validation plugin -->
	<script src="~/Static/plugins/jQueryFileUpload/js/jquery.fileupload-validate.js"></script>

	<script>
		/*jslint unparam: true, regexp: true */
		/*global window, $ */
		$(function () {
			'use strict';

			$("#tab li").removeClass("active");
			$("#tab li#BasicPlus").addClass("active");
			var folderPath = "xxx";
			var url = '/JQueryFileUpload/UploadFiles' + '?folderPath=' + folderPath;
			
			var uploadButton = $('<button/>')
				.addClass('btn btn-primary')
				.prop('disabled', true)
				.text('Processing...')
				.on('click', function () {
					var $this = $(this),
					    data = $this.data();
					$this.off('click')
						.text('Abort')
						.on('click', function () {
							$this.remove();
							data.abort();
						});
					data.submit().always(function () {
						$this.remove();
					});
				});

			$('#fileupload').fileupload({
				url: url,
				dataType: 'json',
				autoUpload: false,
				acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
				maxFileSize: 5000000, // 5000000 = 5 MB
				// Enable image resizing, except for Android and Opera, which actually support image resizing, but fail to send Blob objects via XHR requests:
				disableImageResize: /Android(?!.*Chrome)|Opera/
					.test(window.navigator.userAgent),
				previewMaxWidth: 100,
				previewMaxHeight: 100,
				previewCrop: true
			}).on('fileuploadadd', function (e, data) {
				console.log("fileuploadadd");
				data.context = $('<div/>').appendTo('#files');
				$.each(data.files, function (index, file) {
					var node = $('<p/>').append($('<span/>').text(file.name));
					if (!index) {
						node.append('<br>').append(uploadButton.clone(true).data(data));
					}
					node.appendTo(data.context);
				});
			}).on('fileuploadprocessalways', function (e, data) {
				console.log("fileuploadprocessalways");
				var index = data.index,
					file = data.files[index],
					node = $(data.context.children()[index]);
				if (file.preview) {
					node.prepend('<br>').prepend(file.preview);
				}
				if (file.error) {
					node.append('<br>').append($('<span class="text-danger"/>').text(file.error));
				}
				if (index + 1 === data.files.length) {
					data.context.find('button').text('Upload').prop('disabled', !!data.files.error);
				}
			}).on('fileuploadprogressall', function (e, data) {
				console.log("fileuploadprogressall");
				var progress = parseInt(data.loaded / data.total * 100, 10);
				$('#progress .progress-bar').css('width',progress + '%');
			}).on('fileuploaddone', function (e, data) {
				console.log("fileuploaddone");
				$.each(data.result.files, function (index, file) {
					if (file.url) {
						var link = $('<a>').attr('target', '_blank').prop('href', file.url);
						$(data.context.children()[index]).wrap(link);
					} else if (file.error) {
						console.log("error");
						var error = $('<span class="text-danger"/>').text(file.error);
						$(data.context.children()[index]).append('<br>').append(error);
					}
				});
			}).on('fileuploadfail', function (e, data) {
				console.log("fileuploadfail");
				$.each(data.files, function (index, file) {
					var error = $('<span class="text-danger"/>').text('File upload failed.');
					$(data.context.children()[index]).append('<br>').append(error);
				});
			}).prop('disabled', !$.support.fileInput)
				.parent().addClass($.support.fileInput ? undefined : 'disabled');
		});
	</script>
}

@section brief {
	File Upload widget with the following:
    <ul>
		<li>Multiple file selection</li>
		<li>Drag&amp;drop support</li>
		<li>Progress bar</li>
		<li>Supports cross-domain</li>
		<li>Chunked and resumable file uploads</li>
		<li>Validation and preview images</li>
		<li>Audio and video for jQuery</li>
		<li>Client-side image resizing</li>
	</ul>
}

<!-- The fileinput-button span is used to style the file input field as button -->
<span class="btn btn-success fileinput-button">
	<i class="glyphicon glyphicon-plus"></i>
	<span>Select files...</span>
	<!-- The file input field used as target for the file upload widget -->
	<input id="fileupload" type="file" name="files[]" multiple>
</span>
<br />
<br />
<!-- The global progress bar -->
<div id="progress" class="progress">
	<div class="progress-bar progress-bar-success"></div>
</div>
<!-- The container for the uploaded files -->
<div id="files" class="files"></div>
